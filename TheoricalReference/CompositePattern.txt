+++++++++++++++COMPOSITE OBJECT

++ PROPOSITO

O Composite é um padrão de projeto estrutural que permite que você componha objetos em estruturas 
de árvores e então trabalhe com essas estruturas como se elas fossem objetos individuais.

++ PROBLEMA

Usar o padrão Composite faz sentido apenas quando o modelo central de sua aplicação pode ser representada como uma árvore.

Por exemplo, imagine que você tem dois tipos de objetos: Produtos e Caixas. Uma Caixa pode conter diversos Produtos bem como um
número de Caixas menores. Essas Caixas menores também podem ter alguns Produtos ou até mesmo Caixas menores que elas, e assim em diante.

Digamos que você decida criar um sistema de pedidos que usa essas classes. Os pedidos podem conter produtos simples sem qualquer
compartimento, bem como caixas recheadas com produtos... e outras caixas. Como você faria para determinar o preço total desse pedido?

Você pode tentar uma solução direta: desempacotar todas as caixas, verificar cada produto e então calcular o total. Isso pode ser viável
no mundo real; mas em um programa, não é tão simples como executar uma iteração. Você tem que conhecer as classes dos Produtos e Caixas
que você está examinando, o nível de aninhamento das caixas e outros detalhes cabeludos de antemão. Tudo isso torna uma solução
direta muito confusa ou até impossível.

++ Solução

O padrão Composite sugere que você trabalhe com Produtos e Caixas através de uma interface comum que declara um método para a contagem do preço total.

Como esse método funcionaria? Para um produto, ele simplesmente retornaria o preço dele. Para uma caixa, ele teria que ver cada item que ela contém,
perguntar seu preço e então retornar o total para essa caixa. Se um desses itens for uma caixa menor, aquela caixa também deve verificar seu conteúdo
e assim em diante, até que o preço de todos os componentes internos sejam calculados. Uma caixa pode até adicionar um custo extra para o preço final,
como um preço de embalagem.

O maior benefício dessa abordagem é que você não precisa se preocupar sobre as classes concretas dos objetos que compõem essa árvore. Você não precisa
saber se um objeto é um produto simples ou uma caixa sofisticada. Você pode tratar todos eles com a mesma interface. Quando você chama um método
os próprios objetos passam o pedido pela árvore.

++ Analogia ao mundo real

Exércitos da maioria dos países estão estruturados como hierarquias. Um exército consiste de diversas divisões; uma divisão é um conjunto de brigadas,
e uma brigada consiste de pelotões, que podem ser divididos em esquadrões. Finalmente, um esquadrão é um pequeno grupo de soldados reais. Ordens são
dadas do topo da hierarquia e são passadas abaixo para cada nível até cada soldado saber o que precisa ser feito.

++ Aplicabilidade

+++ Utilize o padrão Composite quando você tem que impementar uma estrutura de objetos tipo árvore

O padrão Composite fornece a você com dois tipos básicos de elementos que compartilham uma interface comum: folhas simples e contêineres complexos.
Um contêiner pode ser composto tanto de folhas como por outros contêineres. Isso permite a você construir uma estrutura de objetos recursiva aninhada
que se assemelha a uma árvore.

+++ Utilize o padrão quando você quer que o código cliente trate tanto os
objetos simples como os compostos de fomra uniforme

Todos os elementos definidos pelo padrão Composite compartilham uma 
interface comum. Usando essa interface o cliente não precisa se preocupar
com a classe concreta dos objetos com os quais está trabalhando.

++ Como implementar

1. Certifique-se que o modelo central de sua aplicação possa ser
representada como uma estrutura de árvore. Tente quebrá-lo em elementos
simples e contêineres. Lembre-se que contêineres devem ser capazes de
conter tanto elementos simples como outros contêineres.

2. Declare a interface componente com uma lista de métodos que façam
sentido para componentes complexos e simples.

3. Crie uma classe folha que represente elementos simples. Um programa
pode ter múltiplas classes folha diferentes.

4. Crie uma classe contêiner para representar elementos complexos. Nessa
classe crie um vetor para armazenar referências aos sub-elementos. O
vetor deve ser capaz de armazenar tanto folhas como contêineres, então
certifique-se que ele foi declarado com um tipo de interface componente.
Quando implementar os métodos para a interface componente, lembre-se que
um contêiner deve ser capaz de delegar a maior parte do trabalho para os
sub-elementos.

5. Por fim, defina os métodos para adicionar e remover os elementos filhos
no contêiner. Tenha em mente que essas operações podem ser declaradas dentro
da interface componente. Isso violaria o princípio de segregação de interface
porque os métodos estarão vazios na classe folha. Contudo, o cliente será
capaz de tratar de todos os elementos de forma igual, mesmo ao montar a árvore.

++ Prós e Contras

+++ Prós

* Você pode trabalhar com estruturas de árvore complexas mais convenientemente:
utilize o polimorfismo e a recursão a seu favor.
* Princípio aberto/fechado. Você pode introduzir novos tipos de elemento na
aplicação sem quebrar o código existente, o que agora funciona com a árvore
de objetos.